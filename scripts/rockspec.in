{% 
local lub = require 'lub'
local lfs = require 'lfs'
local gsub, format = string.gsub, string.format
%}
package = "{{lib.type}}"
version = "{{lib.VERSION}}-1"
source = {
  url = 'https://github.com/lubyk/{{lib.type}}/archive/REL-{{lib.VERSION}}.tar.gz',
  dir = '{{lib.type}}-REL-{{lib.VERSION}}',
}
description = {
  summary = "Lua binding generator from C++ code (uses Doxygen to parse C++ comments).",
  detailed = [[
    A powerful binding generator for C++ code with support for attributes,
    callbacks, errors on callbacks, enums, nested classes, operators, public
    attributes, etc.
    
    Full documentation: http://doc.lubyk.org/dub.html
  ]],
  homepage = "http://doc.lubyk.org/{{lib.type}}.html",
  license = "MIT"
}
dependencies = {
{% for _, v in ipairs(lib.DEPENDS) do %}
  "{{v}}",
{% end %}
}
build = {
  type = 'builtin',
  modules = {
    {{format("[%-20s] = '%s/%s.lua'", "'"..lib.type.."'", lib.type, 'init')}},
{% for file in lfs.dir(lib.type) do %}
{% if file ~= 'init.lua' and file:match('.lua$') then file = file:sub(1, -5) %}
    {{format("[%-20s] = '%s/%s.lua'", "'"..lib.type..'.'..file.."'", lib.type, file)}},
{% end %}
{% end %}
  },
  install = {
    -- These assets are needed to generate the bindings.
    lua = {
{% for path in lub.Dir('dub/assets'):glob() do %}
      {{format("[%-32s] = '%s'", "'"..gsub(gsub(path, '%.', '_'), '/', '.').."'", path)}},
{% end %}
    },
  },
}
